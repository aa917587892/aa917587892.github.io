<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Xray梯子搭建一键脚本，以及Qv2ray客户端配置使用教程</title>
    <link href="/2021/07/07/Xray%E6%A2%AF%E5%AD%90%E6%90%AD%E5%BB%BA%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%EF%BC%8C%E4%BB%A5%E5%8F%8AQv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2021/07/07/Xray%E6%A2%AF%E5%AD%90%E6%90%AD%E5%BB%BA%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%EF%BC%8C%E4%BB%A5%E5%8F%8AQv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Xray梯子搭建一键脚本，以及Qv2ray客户端配置使用教程"><a href="#Xray梯子搭建一键脚本，以及Qv2ray客户端配置使用教程" class="headerlink" title="Xray梯子搭建一键脚本，以及Qv2ray客户端配置使用教程"></a>Xray梯子搭建一键脚本，以及Qv2ray客户端配置使用教程</h2><p><font color=#999AAA >提示：开始前先准备<br>    1.购买一个vps（这里用的是vultr,别的也可以）<br>    2.购买一个域名<br>    3.下载sshr软件<br>    4.脚本安装Xray服务端</p><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="购买vps："><a href="#购买vps：" class="headerlink" title="购买vps："></a>购买vps：</h1><font color=black >  我现在用的vultr，首要原因可以随时删除服务器重建服务器，以达到换ip的效果，其次这是我见过有韩国日本节点的最便宜的一家，搭配联通宽带真的是无敌了。然后就是可以支付宝付款，很方便了。<p><font  color=red>首先注册vultr账号：vultr注册</font><br>注册好第一次进去会提示让你完善信息，首次使用之前需要充值最少10刀，之后进入控制台界面，点击products，然后点右上角的加号添加server。<br><img src="https://img-blog.csdnimg.cn/20210528171523578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">如图配置就好，如果有韩国建议选择韩国得，ping值会低很多<br><img src="https://img-blog.csdnimg.cn/20210528171746964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意这里一定换成旁边的Debian 9，不然证书申请会出问题<br><img src="https://img-blog.csdnimg.cn/20210528171908314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后选择5美元/每月得就够用了 dploy now 就好了。等一分钟就可以running<br><img src="https://img-blog.csdnimg.cn/20210528172240912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210528172322378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>记住ip、username、password</p><h1 id="购买域名："><a href="#购买域名：" class="headerlink" title="购买域名："></a>购买域名：</h1><p>怎么购买域名我这里就不说了 解析选择上面得那个ip地址就好了<br>Xray同样与VMess，VLess，Trojan一样，也是走https，所以也需要有一个自己的域名为我们做掩护。</p><p>买域名的地方也很多，国内主要是腾讯云和阿里云，域名不需要在国外供应商买，哪里买都一样（国内买需要实名认证，而且认证需要一些时间。介意的还是直接在godaddy买吧）。腾讯阿里都有新人优惠，第一次购买域名，像.club, .xyz之类的小众域名基本只要1块一年，很便宜了</p><h1 id="脚本安装Xray服务端："><a href="#脚本安装Xray服务端：" class="headerlink" title="脚本安装Xray服务端："></a>脚本安装Xray服务端：</h1><p>这里下载putty为例 ，将ip填进去open<br><img src="https://img-blog.csdnimg.cn/20210528172839335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后用刚刚记住得username和password登录(密码是隐藏复制右击在回车就好了)</p><p>打开服务端后，安装脚本</p><div class="code-wrapper"><pre><code class="hljs bash">wget -N --no-check-certificate <span class="hljs-string">&quot;https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh&quot;</span> &amp;&amp; chmod 700 /root/install.sh &amp;&amp; /root/install.sh</code></pre></div><p><img src="https://img-blog.csdnimg.cn/20210528173318817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">依次选择 2.任意组合安装——1.Xray-core——0.VLESS+TLS/XTLS+TCP</p><p>安装好之后，浏览器打开自己的域名，可以看到伪装网站<br><img src="https://img-blog.csdnimg.cn/20210528173432590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><font color=red>注意了: 这里如果电脑打开不开这个域名(不能用外网打开)，就不要进行了，需要重新换过vps或者换过ip。</p><p>之后安装BBR加速，重新再跑一次脚本：<br><img src="https://img-blog.csdnimg.cn/20210528173318817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>依次选择13——1安装脚本<br><img src="https://img-blog.csdnimg.cn/20210528174005951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">之后会自动安装BBR，安装好之后再选11，开启BBR，然后重启服务端就好了 #reboot：</p><p>重启后再跑一次脚本，输入3，1，复制记录下输出信息:<br><img src="https://img-blog.csdnimg.cn/20210528174307284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="电脑端Qv2ray客户端配置使用"><a href="#电脑端Qv2ray客户端配置使用" class="headerlink" title="电脑端Qv2ray客户端配置使用"></a>电脑端Qv2ray客户端配置使用</h1><p>这里去网上下载一个Qv2ray客户端就可以了</p><p>Qv2ray与之前使用的v2rayN不同，核心需要单独下载，下载安装好客户端后，我们再根据系统下载核心，下载好是一个zip文件，我们先把他解压了：放在保存的地方，防止误删。<br>我们先打开客户端，选择preference –&gt; kernel Settings：<br><img src="https://img-blog.csdnimg.cn/2021052819533060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>之后将 v@eay core executable Path选择为我们刚才下好解压出的xray核心文件夹中的xray，将v2ray assests directory改为xray核心文件夹：</p><p><img src="https://img-blog.csdnimg.cn/20210528195353920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>选好后点OK。</p><p>之后如下添加节点，配置客户端。<br><img src="https://img-blog.csdnimg.cn/20210528195441667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="upload successful"></p><p>点ok之后，可能需要重启一下客户端，再打开，新的节点就可以使用了。</p><h1 id="移动端V2rayNG配置使用"><a href="#移动端V2rayNG配置使用" class="headerlink" title="移动端V2rayNG配置使用"></a>移动端V2rayNG配置使用</h1><p>地址填写域名就可以了，<br>用户id 就是上面服务端上的保存的那堆东西里的用户ID<br>flow 也在那堆东西里</p><p><img src="https://img-blog.csdnimg.cn/20210528195632829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>保存一下就可以，访问外网了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vpn</tag>
      
      <tag>VPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js高阶函数Filter/map/reduce</title>
    <link href="/2021/07/03/js%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <url>/2021/07/03/js%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="filter-map-reduce三个高阶函数"><a href="#filter-map-reduce三个高阶函数" class="headerlink" title="filter()/map()/reduce三个高阶函数"></a>filter()/map()/reduce三个高阶函数</h2><div class="code-wrapper"><pre><code class="hljs h"><span class="hljs-keyword">const</span> aa=[<span class="hljs-number">11</span>,<span class="hljs-number">23</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">120</span>,<span class="hljs-number">555</span>] <span class="hljs-comment">//找出所有小于50的数字</span> let newnum1=aa.filter(function(n)&#123;     <span class="hljs-keyword">return</span> n &lt; <span class="hljs-number">50</span>; &#125;) <span class="hljs-comment">//将得到的数字都乘于2</span> let newnum2=newnum1.<span class="hljs-built_in">map</span>(function(n)&#123;     <span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span> &#125;) <span class="hljs-comment">//将得到的数字进行汇总</span> let newnum3=newnum2.reduce(function(preValue,n)&#123;     <span class="hljs-keyword">return</span> prevalue + n &#125;,<span class="hljs-number">0</span>)</code></pre></div><h3 id="更加简便的方法"><a href="#更加简便的方法" class="headerlink" title="更加简便的方法"></a>更加简便的方法</h3><div class="code-wrapper"><pre><code class="hljs h">let sum=aa.filter(function(n)&#123;    <span class="hljs-keyword">return</span> n&gt; <span class="hljs-number">50</span>&#125;).<span class="hljs-built_in">map</span>(function(n)&#123;    <span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span>&#125;).reduce(function(preValue,n)&#123;    <span class="hljs-keyword">return</span> preValue + n&#125;)<span class="hljs-comment">//把他简便成箭头函数</span>let sum=aa.filter(n =&gt; n&gt; <span class="hljs-number">50</span>).<span class="hljs-built_in">map</span>(n =&gt; n * <span class="hljs-number">2</span>).reduce((preValue,n) =&gt; preValue + n)</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP获取文件下所有子目录.md</title>
    <link href="/2021/06/19/PHP%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%B8%8B%E6%89%80%E6%9C%89%E5%AD%90%E7%9B%AE%E5%BD%95/"/>
    <url>/2021/06/19/PHP%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%B8%8B%E6%89%80%E6%9C%89%E5%AD%90%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="php获取某目录所有子目录-输出多维数组格式"><a href="#php获取某目录所有子目录-输出多维数组格式" class="headerlink" title="php获取某目录所有子目录 输出多维数组格式"></a>php获取某目录所有子目录 输出多维数组格式</h1><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xf_scandir</span>(<span class="hljs-params"><span class="hljs-variable">$dir</span></span>)</span><span class="hljs-function"></span>&#123;     <span class="hljs-variable">$files</span> = <span class="hljs-keyword">array</span>();     <span class="hljs-keyword">if</span>( <span class="hljs-variable">$handle</span>=opendir(<span class="hljs-variable">$dir</span>) )&#123;                             <span class="hljs-comment">//$handle=Resource id #3</span>        <span class="hljs-keyword">while</span>( (<span class="hljs-variable">$file</span> = readdir(<span class="hljs-variable">$handle</span>)) !== <span class="hljs-literal">false</span> )&#123;       <span class="hljs-comment">//echo $file;echo &quot;&lt;hr&gt;&quot;; //$file分别是 .  ..   a.php   b.php   c</span>            <span class="hljs-keyword">if</span>( <span class="hljs-variable">$file</span> != <span class="hljs-string">&quot;..&quot;</span> &amp;&amp; <span class="hljs-variable">$file</span> != <span class="hljs-string">&quot;.&quot;</span>&amp;&amp;!strpos(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;.&quot;</span>)&amp;&amp; <span class="hljs-variable">$file</span> != <span class="hljs-string">&quot;B&quot;</span> )&#123;<span class="hljs-comment">//这里控制不选择什么文件夹或什么类型文件后缀</span>                <span class="hljs-keyword">if</span>( is_dir(<span class="hljs-variable">$dir</span> . <span class="hljs-string">&quot;/&quot;</span> . <span class="hljs-variable">$file</span>) )&#123;   <span class="hljs-comment">//文件夹c           </span>                        <span class="hljs-variable">$files</span>[<span class="hljs-variable">$file</span>] = xf_scandir(<span class="hljs-variable">$dir</span> . <span class="hljs-string">&quot;/&quot;</span> . <span class="hljs-variable">$file</span>);                                                      &#125;<span class="hljs-keyword">else</span>&#123;                              <span class="hljs-comment">//文件a.php,b.php                 </span>                    <span class="hljs-variable">$files</span>[] = <span class="hljs-variable">$file</span>;                          <span class="hljs-comment">//var_dump($file);echo &quot;&lt;hr&gt;&quot;;//分别是 a.php  b.php</span>                &#125;            &#125;        &#125;        closedir(<span class="hljs-variable">$handle</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$files</span>;    &#125;&#125;<span class="hljs-variable">$re</span>=xf_scandir(<span class="hljs-string">&#x27;../../domain&#x27;</span>);<span class="hljs-keyword">echo</span>(json_encode(<span class="hljs-variable">$re</span>));<span class="hljs-comment">// // var_dump($re);</span><span class="hljs-comment">// print_r($re)</span></code></pre></div><h1 id="php获取某目录所有子目录-输出文件名"><a href="#php获取某目录所有子目录-输出文件名" class="headerlink" title="php获取某目录所有子目录 输出文件名"></a>php获取某目录所有子目录 输出文件名</h1><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$path</span> = <span class="hljs-string">&#x27;../../domain&#x27;</span>;getDir(<span class="hljs-variable">$path</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDir</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;    <span class="hljs-keyword">if</span>(is_dir(<span class="hljs-variable">$path</span>))&#123;        <span class="hljs-variable">$dir</span> =  scandir(<span class="hljs-variable">$path</span>);        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;            <span class="hljs-variable">$sub_path</span> =<span class="hljs-variable">$path</span> .<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$value</span>;            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$value</span> == <span class="hljs-string">&#x27;.&#x27;</span> || <span class="hljs-variable">$value</span> == <span class="hljs-string">&#x27;..&#x27;</span>)&#123;                <span class="hljs-keyword">continue</span> ;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(is_dir(<span class="hljs-variable">$sub_path</span>))&#123;                <span class="hljs-variable">$str</span> =<span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span> ;                <span class="hljs-comment">// $arry= explode(&#x27;/&#x27;,$str);</span>                <span class="hljs-comment">// get_xiangmu($arry);</span>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;                <span class="hljs-comment">// print_r($arry);</span>                <span class="hljs-comment">// echo(&quot;&lt;br/&gt;&quot;);</span>                <span class="hljs-comment">// echo($arry);</span>            <span class="hljs-comment">//   print_r (explode(&#x27;/&#x27;,$str,-1));</span>                getDir(<span class="hljs-variable">$sub_path</span>);            &#125;        &#125;    &#125;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>数组</tag>
      
      <tag>获取文件夹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js数组格式字符串转换成数组</title>
    <link href="/2021/06/19/js%E6%95%B0%E7%BB%84%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B0%E7%BB%84/"/>
    <url>/2021/06/19/js%E6%95%B0%E7%BB%84%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>方法1：使用eval() 函数,可计算某个字符串，并执行其中的的 JavaScript 代码。</p><p><a href="https://img-blog.csdn.net/20180823173218936?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDI5ODk5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70">https://img-blog.csdn.net/20180823173218936?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDI5ODk5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a></p><p>方法二，数组的类型也是对象，因此可以用JSON.parse将数组转换成对象</p><p> JSON.parse() 方法用于将一个 JSON 字符串转换为对象。<br> 如果报错:VM38152:1 Uncaught SyntaxError: Unexpected token o in JSON at position 1<br> 是因为 JSON格式问题  要是双引号不能是单引号<br><a href="https://img-blog.csdn.net/20180823173928519?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDI5ODk5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70">https://img-blog.csdn.net/20180823173928519?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDI5ODk5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a> </p>]]></content>
    
    
    
    <tags>
      
      <tag>JSON</tag>
      
      <tag>js</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP和jQuery创建一个简单的在线聊天工具</title>
    <link href="/2021/06/08/%E5%A6%82%E4%BD%95%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BA%BA%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <url>/2021/06/08/%E5%A6%82%E4%BD%95%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BA%BA%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h1><p>在本教程中，我们将要使用PHP和jQuery创建一个简单的在线聊天工具。 这种实用性的模块对于你想要有实时在线客户支持系统的网站可以说是完美。<br><img src="https://img-blog.csdnimg.cn/20210602152201308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUwMjU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>废话不多说直接开始。</p><h1 id="步骤1：HTML的代码结构"><a href="#步骤1：HTML的代码结构" class="headerlink" title="步骤1：HTML的代码结构"></a>步骤1：HTML的代码结构</h1><p>创建一个index.php</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Chat - Customer Module<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;welcome&quot;</span>&gt;</span>Welcome, <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logout&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exit&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Exit Chat<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;clear:both&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chatbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usermsg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;usermsg&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;63&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submitmsg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submitmsg&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Send&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><span class="javascript"><span class="hljs-comment">// jQuery Document</span></span><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript"> </span><span class="javascript">&#125;);</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p><strong>css样式</strong></p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;    <span class="hljs-attribute">font</span>:<span class="hljs-number">12px</span> arial;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#222</span>;    <span class="hljs-attribute">text-align</span>:center;    <span class="hljs-attribute">padding</span>:<span class="hljs-number">35px</span>; &#125;  <span class="hljs-selector-tag">form</span>, <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">span</span> &#123;    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;    <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>; &#125;  <span class="hljs-selector-tag">input</span> &#123; <span class="hljs-attribute">font</span>:<span class="hljs-number">12px</span> arial; &#125;  <span class="hljs-selector-tag">a</span> &#123;    <span class="hljs-attribute">color</span>:<span class="hljs-number">#0000FF</span>;    <span class="hljs-attribute">text-decoration</span>:none; &#125;      <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">text-decoration</span>:underline; &#125;  <span class="hljs-selector-id">#wrapper</span>, <span class="hljs-selector-id">#loginform</span> &#123;    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;    <span class="hljs-attribute">padding-bottom</span>:<span class="hljs-number">25px</span>;    <span class="hljs-attribute">background</span>:<span class="hljs-number">#EBF4FB</span>;    <span class="hljs-attribute">width</span>:<span class="hljs-number">504px</span>;    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ACD8F0</span>; &#125;  <span class="hljs-selector-id">#loginform</span> &#123; <span class="hljs-attribute">padding-top</span>:<span class="hljs-number">18px</span>; &#125;      <span class="hljs-selector-id">#loginform</span> <span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>; &#125;  <span class="hljs-selector-id">#chatbox</span> &#123;    <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:left</span>;    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;    <span class="hljs-attribute">margin-bottom</span>:<span class="hljs-number">25px</span>;    <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;    <span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>;    <span class="hljs-attribute">height</span>:<span class="hljs-number">270px</span>;    <span class="hljs-attribute">width</span>:<span class="hljs-number">430px</span>;    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ACD8F0</span>;    <span class="hljs-attribute">overflow</span>:auto; &#125;  <span class="hljs-selector-id">#usermsg</span> &#123;    <span class="hljs-attribute">width</span>:<span class="hljs-number">395px</span>;    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ACD8F0</span>; &#125;  <span class="hljs-selector-id">#submit</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>; &#125;  <span class="hljs-selector-class">.error</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0000</span>; &#125;  <span class="hljs-selector-id">#menu</span> &#123; <span class="hljs-attribute">padding</span>:<span class="hljs-number">12.5px</span> <span class="hljs-number">25px</span> <span class="hljs-number">12.5px</span> <span class="hljs-number">25px</span>; &#125;  <span class="hljs-selector-class">.welcome</span> &#123; <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>; &#125;  <span class="hljs-selector-class">.logout</span> &#123; <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>; &#125;  <span class="hljs-selector-class">.msgln</span> &#123; <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">0</span>; &#125;</code></pre></div><p>上面这些CSS没什么特别的，除了部分的id或者class，我们将要在之后再为它们添加与修改</p><h1 id="步骤2：使用php创建登陆表单"><a href="#步骤2：使用php创建登陆表单" class="headerlink" title="步骤2：使用php创建登陆表单"></a>步骤2：使用php创建登陆表单</h1><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> <span class="hljs-comment">//放入index.php &lt;html&gt;标签的上方 </span><span class="hljs-comment">//在信息存储到 PHP session 中之前，首先必须启动会话。session_start() 函数必须位于 &lt;html&gt; 标签之前：</span>session_start(); <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loginForm</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//这是一个简单给自己命名的html架子</span>    <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;</span><span class="hljs-string">    &lt;div id=&quot;loginform&quot;&gt;</span><span class="hljs-string">    &lt;form action=&quot;index.php&quot; method=&quot;post&quot;&gt;</span><span class="hljs-string">        &lt;p&gt;Please enter your name to continue:&lt;/p&gt;</span><span class="hljs-string">        &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;</span><span class="hljs-string">        &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; /&gt;</span><span class="hljs-string">        &lt;input type=&quot;submit&quot; name=&quot;enter&quot; id=&quot;enter&quot; value=&quot;Enter&quot; /&gt;</span><span class="hljs-string">    &lt;/form&gt;</span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">    &#x27;</span>;&#125; <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;enter&#x27;</span>]))&#123;<span class="hljs-comment">//isset() 函数用于检测变量是否已设置并且非 NULL。</span>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>] != <span class="hljs-string">&quot;&quot;</span>)&#123;        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = stripslashes(htmlspecialchars(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>]));    &#125;<span class="hljs-comment">//stripslashes()删除反斜杠“/”。htmlspecialchars把预定义的字符 &quot;&lt;&quot; （小于）和 &quot;&gt;&quot; （大于）转换为 HTML 实体</span>    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;span class=&quot;error&quot;&gt;Please type in a name&lt;/span&gt;&#x27;</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>我们创建的这个loginForm()的function是由一个简单的登录表单组成的，它会询问用户的名字。 接下来，使用一个if和else的声明来验证这个人输入的名字。 如果一个用户输入了名字，我们将设置这个名字为$_SESSION[‘name’]。 由于我们将使用基于cookie的session来存储名字，所以我们必须要在任何东西反馈到浏览器之前请求一个session_start()。</p><p>有一件事情你可能需要额外的注意一下，我们使用了htmlspecialchars() function，这个会转换特殊符号到HTML实体，以此来保护名字变量的字符不会成为跨站点脚本（XSS）的受害者。 我们将在之后同时添加这个功能到将要发布在聊天记录里面的文字变量上。</p><h1 id="步骤3：显示登陆表单"><a href="#步骤3：显示登陆表单" class="headerlink" title="步骤3：显示登陆表单"></a>步骤3：显示登陆表单</h1><p>如果用户并没有登录，并且还没有产生session，为了要显示登录的表单，我们需要在原始代码中的#wrapper div和script标签周围使用另外一个if和else的声明。 反之，如果用户已经登录而且已经有了一个session，这个声明将隐藏登录表单，并且显示聊天框。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>]))&#123;<span class="hljs-comment">//判断是否有session 如果为空调动loginForm()</span>    loginForm();&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-meta">?&gt;</span>&lt;div id=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;    &lt;div id=<span class="hljs-string">&quot;menu&quot;</span>&gt;        &lt;p <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">welcome</span>&quot;&gt;<span class="hljs-title">Welcome</span>, &lt;<span class="hljs-title">b</span>&gt;&lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> $<span class="hljs-title">_SESSION</span>[&#x27;<span class="hljs-title">name</span>&#x27;]; ?&gt;&lt;/<span class="hljs-title">b</span>&gt;&lt;/<span class="hljs-title">p</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">p</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">logout</span>&quot;&gt;&lt;<span class="hljs-title">a</span> <span class="hljs-title">id</span>=&quot;<span class="hljs-title">exit</span>&quot; <span class="hljs-title">href</span>=&quot;#&quot;&gt;<span class="hljs-title">Exit</span> <span class="hljs-title">Chat</span>&lt;/<span class="hljs-title">a</span>&gt;&lt;/<span class="hljs-title">p</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">div</span> <span class="hljs-title">style</span>=&quot;<span class="hljs-title">clear</span>:<span class="hljs-title">both</span>&quot;&gt;&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">div</span>&gt;    </span><span class="hljs-class">    &lt;<span class="hljs-title">div</span> <span class="hljs-title">id</span>=&quot;<span class="hljs-title">chatbox</span>&quot;&gt;&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-class">     </span><span class="hljs-class">    &lt;<span class="hljs-title">form</span> <span class="hljs-title">name</span>=&quot;<span class="hljs-title">message</span>&quot; <span class="hljs-title">action</span>=&quot;&quot;&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">input</span> <span class="hljs-title">name</span>=&quot;<span class="hljs-title">usermsg</span>&quot; <span class="hljs-title">type</span>=&quot;<span class="hljs-title">text</span>&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">usermsg</span>&quot; <span class="hljs-title">size</span>=&quot;63&quot; /&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">input</span> <span class="hljs-title">name</span>=&quot;<span class="hljs-title">submitmsg</span>&quot; <span class="hljs-title">type</span>=&quot;<span class="hljs-title">submit</span>&quot;  <span class="hljs-title">id</span>=&quot;<span class="hljs-title">submitmsg</span>&quot; <span class="hljs-title">value</span>=&quot;<span class="hljs-title">Send</span>&quot; /&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">form</span>&gt;</span><span class="hljs-class">&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-class">&lt;<span class="hljs-title">script</span> <span class="hljs-title">type</span>=&quot;<span class="hljs-title">text</span>/<span class="hljs-title">javascript</span>&quot; <span class="hljs-title">src</span>=&quot;<span class="hljs-title">http</span>://<span class="hljs-title">ajax</span>.<span class="hljs-title">googleapis</span>.<span class="hljs-title">com</span>/<span class="hljs-title">ajax</span>/<span class="hljs-title">libs</span>/<span class="hljs-title">jquery</span>/1.3/<span class="hljs-title">jquery</span>.<span class="hljs-title">min</span>.<span class="hljs-title">js</span>&quot;&gt;&lt;/<span class="hljs-title">script</span>&gt;</span><span class="hljs-class">&lt;<span class="hljs-title">script</span> <span class="hljs-title">type</span>=&quot;<span class="hljs-title">text</span>/<span class="hljs-title">javascript</span>&quot;&gt;</span><span class="hljs-class">// <span class="hljs-title">jQuery</span> <span class="hljs-title">Document</span></span><span class="hljs-class">$(<span class="hljs-title">document</span>).<span class="hljs-title">ready</span>(<span class="hljs-title">function</span>()</span>&#123;.....&#125;);&lt;/script&gt;<span class="hljs-meta">&lt;?php</span>&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><h1 id="步骤4：处理用户的输入"><a href="#步骤4：处理用户的输入" class="headerlink" title="步骤4：处理用户的输入"></a>步骤4：处理用户的输入</h1><p>在用户提交了表单以后，我们希望抓取他们的输入数据并且将它们写入到聊天记录里面， 要想完成这个，我们必须使用jQuery和PHP来同步客户端和服务器端的数据。</p><div class="code-wrapper"><pre><code class="hljs php">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<span class="hljs-comment">// jQuery Document</span>$(document).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//用户点击发送内容</span>$(<span class="hljs-string">&quot;#submitmsg&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">var</span> clientmsg = $(<span class="hljs-string">&quot;#usermsg&quot;</span>).val();$.post(<span class="hljs-string">&quot;post.php&quot;</span>, &#123;text: clientmsg&#125;);$(<span class="hljs-string">&quot;#usermsg&quot;</span>).attr(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;);&#125;);&lt;/script&gt;</code></pre></div><ol><li>在我们做任何事情之前，我们必须先抓取用户的输入数据，或者说是他们所输入到#submitmsg input里面的文字。 这个可以使用val()功能来实现，它会抓取表单里面的所有数据。 我们将抓取的数据放入到clientmsg变量里面。</li><li>接下来是最重要的一个部分：jQuery POST 请求。 这一步会发送一个POST的请求到我们稍后会创建的post.php文件， 它会POST客户端的输入数据，或者任何已经被存储到clientmsg变量的数据。</li><li>在最后，我们将设置value属性的值到空白来清除#usermsg input。</li></ol><p>** 创建post.php**<br> 现在，我们有了POST的数据，并且每一次当用户提交表单并发送一条新的消息的时候，数据们都被发送到了post.php文件里。 我们现在的目标就是抓取这些数据，然后回过头来写入到我们的聊天记录框里。<br> <div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>session_start();<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>]))&#123;    <span class="hljs-variable">$text</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;text&#x27;</span>];         <span class="hljs-variable">$fp</span> = fopen(<span class="hljs-string">&quot;log.html&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);    fwrite(<span class="hljs-variable">$fp</span>, <span class="hljs-string">&quot;&lt;div class=&#x27;msgln&#x27;&gt;(&quot;</span>.date(<span class="hljs-string">&quot;g:i A&quot;</span>).<span class="hljs-string">&quot;) &lt;b&gt;&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>].<span class="hljs-string">&quot;&lt;/b&gt;: &quot;</span>.stripslashes(htmlspecialcars(<span class="hljs-variable">$text</span>)).<span class="hljs-string">&quot;&lt;br&gt;&lt;/div&gt;&quot;</span>);    <span class="hljs-comment">//&quot;a&quot; （写入方式打开，将文件指针指向文件末尾进行写入，如果文件不存在则尝试创建之）</span>    fclose(<span class="hljs-variable">$fp</span>);<span class="hljs-comment">//关闭打开的文件</span>&#125;<span class="hljs-meta">?&gt;</span></code></pre></div></p><ol><li>在我们做任何事情之前，我们必须先用session_start()功能来开始post.php文件，因为我们也会在这个文件里面使用用户名字的session。</li><li>在做任何事情之前，我们需要使用isset布尔值，来检查如果session中’name’是否已经存在了。</li><li>现在我们将要抓取那些使用jQuery被发送到该文件的POST的数据， 并且我们将这些数据存储入$text变量。</li><li>这些所有的用户输入数据，都将被存储在log.html文件里。 为了完成这一步，我们将使用fopen功能的’a’模式打开文件，根据php.net的规则打开文件且仅限写入；接下来放置文件指示到文件的最后。 如果这个文件并不存在，那么尝试创建它。 接下来，我们使用fwrite()功能来写入我们的消息到这个文件里。</li><li>我们即将写入的消息将会被封闭在.msgIn div里面， 它会包含数据、使用date()功能所生成的时间、用户的session、以及内容等，同样的使用htmlspecialchars()功能来防止跨站点脚本XSS。<br>最后，我们使用fclose()来结束我们的文件操控。</li></ol><h1 id="步骤5：显示聊天记录（log-html）-内容"><a href="#步骤5：显示聊天记录（log-html）-内容" class="headerlink" title="步骤5：显示聊天记录（log.html） 内容"></a>步骤5：显示聊天记录（log.html） 内容</h1><p>所有用户已经发布的消息都被处理过了，并且我们也是用jQuery将它们发布了；它们是被PHP写入到聊天记录框里面的， 所以唯一剩下来需要走的就是显示这些更新过的聊天记录给用户。</p><p>有些时候为了给自己省事，如果聊天文件里面已经有内容了的话，我们需要预先读取聊天记录到#chatbox div。</p><div class="code-wrapper"><pre><code class="hljs php">&lt;div id=<span class="hljs-string">&quot;chatbox&quot;</span>&gt;<span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(file_exists(<span class="hljs-string">&quot;log.html&quot;</span>) &amp;&amp; filesize(<span class="hljs-string">&quot;log.html&quot;</span>) &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//file_exists() 指定的文件是否存在filesize()文件大小</span>    <span class="hljs-variable">$handle</span> = fopen(<span class="hljs-string">&quot;log.html&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);    <span class="hljs-variable">$contents</span> = fread(<span class="hljs-variable">$handle</span>, filesize(<span class="hljs-string">&quot;log.html&quot;</span>));    fclose(<span class="hljs-variable">$handle</span>);         <span class="hljs-keyword">echo</span> <span class="hljs-variable">$contents</span>;&#125;<span class="hljs-meta">?&gt;</span>&lt;/div&gt;</code></pre></div><p>这一次我们只是读取并且输出这些文件的内容到页面上。</p><p><strong>jquery.ajax请求</strong></p><p>ajax请求是我们做的所有事情的核心， 这个请求不仅仅允许我们在不刷新页面的情况下通过表单发送和接受数据，而且还允许我们处理数据请求。</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadLog</span>(<span class="hljs-params"></span>)</span>&#123;$.ajax(&#123;<span class="hljs-attr">url</span>: <span class="hljs-string">&quot;log.html&quot;</span>,<span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">html</span>)</span>&#123;$(<span class="hljs-string">&quot;#chatbox&quot;</span>).html(html); <span class="hljs-comment">//Insert chat log into the #chatbox div</span>  &#125;,&#125;);&#125;</code></pre></div><p>我们将ajax的请求囊括在一个function里面， 过一会你就知道为什么了。 你可以看到，在上面，我们仅仅使用了3个jQuery ajax的请求对象。</p><p>url: 一个URL请求的字符串 我们将使用我们的聊天记录文件名log.html。<br>cache: 这个会避免我们的文件被放入缓存。 它会确保我们每一次发送请求的时候都会得到一个最新的聊天记录。<br>success: 这个允许我们附上一个功能来传递我们请求的数据。<br>你可以看到，我们接着移动我们请求的数据（html）到#chatbox div。</p><p><strong>自动滚动</strong><br>由于你可能在别的聊天工具里面看过，如果聊天记录的容器（#chatbox)的内容溢出了就会自动的向下滚动。 我们将要实现一个简单的而又相似的效果，需要做的是在我们请求ajax的前后对比容器的滚动高度。 如果你滚动的高度大于请求之后的高度，我们会使用jQuery的动画效果来滚动#chatbox div。</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadLog</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">var</span> oldscrollHeight = $(<span class="hljs-string">&quot;#chatbox&quot;</span>).attr(<span class="hljs-string">&quot;scrollHeight&quot;</span>) - <span class="hljs-number">20</span>; <span class="hljs-comment">//请求之前滚动的高度</span>$.ajax(&#123;<span class="hljs-attr">url</span>: <span class="hljs-string">&quot;log.html&quot;</span>,<span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">html</span>)</span>&#123;$(<span class="hljs-string">&quot;#chatbox&quot;</span>).html(html); <span class="hljs-comment">//添加聊天记录</span><span class="hljs-comment">//Auto-scroll</span><span class="hljs-keyword">var</span> newscrollHeight = $(<span class="hljs-string">&quot;#chatbox&quot;</span>).attr(<span class="hljs-string">&quot;scrollHeight&quot;</span>) - <span class="hljs-number">20</span>; <span class="hljs-comment">//Scroll height after the request</span><span class="hljs-keyword">if</span>(newscrollHeight &gt; oldscrollHeight)&#123;$(<span class="hljs-string">&quot;#chatbox&quot;</span>).animate(&#123; <span class="hljs-attr">scrollTop</span>: newscrollHeight &#125;, <span class="hljs-string">&#x27;normal&#x27;</span>); <span class="hljs-comment">//scrollTop垂直滚动条的位置</span>&#125;  &#125;,&#125;);&#125;</code></pre></div><p>先请求现在#chatbox标签的高度，在请求ajax后的#chatbox标签高度。两者比较大小如果ajax大则通过.animate({})改变</p><p><strong>保持数据的不断更新</strong></p><div class="code-wrapper"><pre><code class="hljs php">setInterval (loadLog, <span class="hljs-number">2500</span>);<span class="hljs-comment">//Reload file every 2500 ms or x ms if you wish to change the second parameter</span></code></pre></div><p>我们问题的回答你可以在setInterval function的那一行找到， 这个功能每2.5秒就会运行一次LoadLog() function，并且loadLog function会请求更新过的数据以及自动滚动的div。</p><h1 id="步骤6：退出聊天室"><a href="#步骤6：退出聊天室" class="headerlink" title="步骤6：退出聊天室"></a>步骤6：退出聊天室</h1><p>为了允许用户登出并结束session，我们将要使用jQuery来完成它。</p><div class="code-wrapper"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<span class="hljs-comment">// jQuery Document</span>$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//If user wants to end session</span>$(<span class="hljs-string">&quot;#exit&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">var</span> exit = confirm(<span class="hljs-string">&quot;Are you sure you want to end the session?&quot;</span>);<span class="hljs-keyword">if</span>(exit==<span class="hljs-literal">true</span>)&#123;<span class="hljs-built_in">window</span>.location = <span class="hljs-string">&#x27;index.php?logout=true&#x27;</span>;&#125;&#125;);&#125;);&lt;/script&gt;</code></pre></div><p>简单的展示了如果用户点击#exit链接的时候弹出的确认提示， 如果用户确认了退出，也就是说他们决定结束session，那么我们将把他们送回到index.php?logout=true。 这个简单的创建了一个叫logout并且值为true的变量。 我们将要使用PHP来抓住这个变量。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;logout&#x27;</span>]))&#123;          <span class="hljs-comment">//Simple exit message</span>    <span class="hljs-variable">$fp</span> = fopen(<span class="hljs-string">&quot;log.html&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);    fwrite(<span class="hljs-variable">$fp</span>, <span class="hljs-string">&quot;&lt;div class=&#x27;msgln&#x27;&gt;&lt;i&gt;User &quot;</span>. <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] .<span class="hljs-string">&quot; has left the chat session.&lt;/i&gt;&lt;br&gt;&lt;/div&gt;&quot;</span>);    fclose(<span class="hljs-variable">$fp</span>);     <span class="hljs-comment">//将显示退出聊天室的人名字显示出来</span>    session_destroy();<span class="hljs-comment">//摧毁session</span>    header(<span class="hljs-string">&quot;Location: index.php&quot;</span>); <span class="hljs-comment">//</span>&#125;</code></pre></div><p>到这里就完成了一个多人在线聊天室啦</p>]]></content>
    
    
    
    <tags>
      
      <tag>聊天室</tag>
      
      <tag>PHP</tag>
      
      <tag>jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-cli3</title>
    <link href="/2020/09/05/Vue-cli3%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/09/05/Vue-cli3%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-cli是什么"><a href="#Vue-cli是什么" class="headerlink" title="Vue-cli是什么"></a>Vue-cli是什么</h2><p>如果你在开发大型项目, 那么你需要, 并且必然需要使用Vue CLI<br>使用Vue.js开发大型应用时，我们需要考虑代码目录结构、项目结构和部署、热加载、代码单元测试等事情。<br>如果每个项目都要手动完成这些工作，那无以效率比较低效，所以通常我们会使用一些脚手架工具来帮助完成这些事情。</p><h2 id="Vue-cli3安装"><a href="#Vue-cli3安装" class="headerlink" title="Vue-cli3安装"></a>Vue-cli3安装</h2><p>Vue CLI2初始化项目<br>    vue init webpack my-project<br>Vue CLI3初始化项目<br>    vue create my-project</p><h2 id="项目初始化配置"><a href="#项目初始化配置" class="headerlink" title="项目初始化配置"></a>项目初始化配置</h2><p><img src="/image/1.png" alt="adss"></p><h2 id="vue-router的使用"><a href="#vue-router的使用" class="headerlink" title="vue-router的使用"></a>vue-router的使用</h2><h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><div class="code-wrapper"><pre><code>const Home = () =&gt; import(&#39;../views/Home.vue&#39;)const About = () =&gt;  import(&#39;../views/About.vue&#39;)const My = () =&gt;  import(&#39;../views/my.vue&#39;)</code></pre></div><h4 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h4><div class="code-wrapper"><pre><code><pre><code class="hljs js"> <span class="hljs-comment">//通过按钮调用方法</span> <span class="hljs-comment">//app.vue</span>  <span class="hljs-function"><span class="hljs-title">profileclick</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-built_in">this</span>.$router.push(&#123;    <span class="hljs-attr">path</span> : <span class="hljs-string">&#x27;/profile&#x27;</span>,    <span class="hljs-attr">query</span>:&#123;      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;kebo&#x27;</span>,      <span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,      <span class="hljs-attr">height</span>:<span class="hljs-number">178</span>      &#125;  &#125;)  &#125;    <span class="hljs-comment">//profile.vue</span> &#123;&#123;$route.query&#125;&#125;</code></pre></div></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/2020/08/15/webpack%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/08/15/webpack%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Webpack的使用"><a href="#Webpack的使用" class="headerlink" title="Webpack的使用"></a>Webpack的使用</h2><p>   什么是Webpack: JS的静态模块化打包工具。<br>    安装Wepack首先需要安装node.js，node.js自带了软件包管理工具npm。</p><h2 id="Webpack的安装"><a href="#Webpack的安装" class="headerlink" title="Webpack的安装"></a>Webpack的安装</h2><p>   全局安装webpack(这里我先指定版本号3.6.0，因为vue cli2依赖该版本)<br>   npm install <a href="mailto:&#119;&#101;&#98;&#x70;&#97;&#99;&#x6b;&#64;&#x33;&#46;&#54;&#x2e;&#x30;">&#119;&#101;&#98;&#x70;&#97;&#99;&#x6b;&#64;&#x33;&#46;&#54;&#x2e;&#x30;</a> -g<br>   局部安装webpack（后续才需要）<br>   cd对应的目录<br>   npm install <a href="mailto:&#119;&#101;&#98;&#x70;&#x61;&#99;&#x6b;&#x40;&#x33;&#x2e;&#54;&#46;&#48;">&#119;&#101;&#98;&#x70;&#x61;&#99;&#x6b;&#x40;&#x33;&#x2e;&#54;&#46;&#48;</a> –save-dev<br>      –save-dev 是开发时依赖，项目打包后不需要继续使用的。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>   我们创建如下文件和文件夹：<br>      文件和文件夹解析：<br>         dist文件夹：用于存放之后打包的文件<br>         src文件夹：用于存放我们写的源文件<br>         main.js：项目的入口文件。具体内容查看下面详情。<br>         mathUtils.js：定义了一些数学工具函数，可以在其他地方引用，并且使用。具体内容查看下面的详情。<br>         index.html：浏览器打开展示的首页html<br>         package.json：通过npm init生成的，npm包管理的文件（暂时没有用上，后面才会用上）<br>         mathUtils.js文件中的代码：<br>         main.js文件中的代码</p><h2 id="js-css-less文件导入main-js和导出"><a href="#js-css-less文件导入main-js和导出" class="headerlink" title="js/css/less文件导入main.js和导出"></a>js/css/less文件导入main.js和导出</h2>   <div class="code-wrapper"><pre><code class="hljs js">   <span class="hljs-comment">//comme.js导入</span><span class="hljs-keyword">const</span> &#123;add,sum&#125;=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./js/info2.js&#x27;</span>);<span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>));<span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">10</span>))   <span class="hljs-comment">//es6的导入</span><span class="hljs-keyword">import</span>&#123;name,age,height&#125;<span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./js/info.js&quot;</span><span class="hljs-built_in">console</span>.log(name);<span class="hljs-built_in">console</span>.log(age);<span class="hljs-built_in">console</span>.log(height);<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./css/index.css&#x27;</span>)<span class="hljs-comment">//css的导入</span><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./css/index.less&#x27;</span>)<span class="hljs-comment">//less的导入</span></code></pre></div><h2 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h2><p>   webpack打包指令:<br>   webpack src/main.js dist/bundle.js<br>   我们考虑一下，如果每次使用webpack的命令都需要写上入口和出口作为参数，就非常麻烦，有没有一种方法可以将这两个参数写到配置中，在运行时，直接读取呢？<br>   当然可以，就是创建一个webpack.config.js文件<br>   <div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//webpack.config.js文件</span><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);   <span class="hljs-built_in">module</span>.exports=&#123;      <span class="hljs-comment">//入口:可以是字符串/数组.对象，这里我们入口只有一个，所以写出字符串就可</span>      <span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;./src/main.js&#x27;</span>,      <span class="hljs-comment">//出口：通常是个对象，里面至少包含了两个重要的属性，path和filename</span>      <span class="hljs-attr">output</span>:&#123;         <span class="hljs-attr">path</span>:path.resolve(__dirname,<span class="hljs-string">&#x27;dist&#x27;</span>), <span class="hljs-comment">//__dirname是绝对路径，在node.js中的</span>         <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;bundle.js&#x27;</span>,         <span class="hljs-attr">publicPath</span>:<span class="hljs-string">&#x27;dist/&#x27;</span>  <span class="hljs-comment">//在url图片的时候让他在dist这个文件中找</span>      &#125;&#125;</code></pre></div></p><h4 id="package-json中定义启动npm-run-build"><a href="#package-json中定义启动npm-run-build" class="headerlink" title="package.json中定义启动npm run build"></a>package.json中定义启动npm run build</h4><div class="code-wrapper"><pre><code>     package.json文件中在     &quot;script&quot;:&#123;        &quot;build&quot; : &quot;webpack&quot;     &#125;</code></pre></div><h2 id="loader是什么"><a href="#loader是什么" class="headerlink" title="loader是什么"></a>loader是什么</h2><p>   loader是webpack中一个非常核心的概念。<br>   webpack用来做什么呢？<br>   在我们之前的实例中，我们主要是用webpack来处理我们写的js代码，并且webpack会自动处理js之间相关的依赖。<br>   但是，在开发中我们不仅仅有基本的js代码处理，我们也需要加载css、图片，也包括一些高级的将ES6转成ES5代码，将TypeScript转成ES5代码，将scss、less转成css，将.jsx、.vue文件转成js文件等等。<br>   对于webpack本身的能力来说，对于这些转化是不支持的。<br>   那怎么办呢？给webpack扩展对应的loader就可以啦。</p><h4 id="css-less-js文件依赖"><a href="#css-less-js文件依赖" class="headerlink" title="css/less/js文件依赖"></a>css/less/js文件依赖</h4><p>   css-loader<br>   npm install <a href="mailto:&#x63;&#x73;&#115;&#x2d;&#x6c;&#x6f;&#97;&#x64;&#101;&#x72;&#x40;&#x32;&#x2e;&#48;&#x2e;&#x32;">&#x63;&#x73;&#115;&#x2d;&#x6c;&#x6f;&#97;&#x64;&#101;&#x72;&#x40;&#x32;&#x2e;&#48;&#x2e;&#x32;</a> –save-dev</p><p>   style-loader<br>   npm install <a href="mailto:&#115;&#x74;&#121;&#108;&#x65;&#45;&#108;&#x6f;&#x61;&#x64;&#x65;&#x72;&#x40;&#x30;&#x2e;&#x32;&#x33;&#x2e;&#x31;">&#115;&#x74;&#121;&#108;&#x65;&#45;&#108;&#x6f;&#x61;&#x64;&#x65;&#x72;&#x40;&#x30;&#x2e;&#x32;&#x33;&#x2e;&#x31;</a> –save-dev</p><p>   less-loader<br>   npm install –save-dev <a href="mailto:&#x6c;&#x65;&#x73;&#x73;&#x2d;&#x6c;&#111;&#x61;&#x64;&#x65;&#x72;&#x40;&#x34;&#46;&#49;&#x2e;&#48;">&#x6c;&#x65;&#x73;&#x73;&#x2d;&#x6c;&#111;&#x61;&#x64;&#x65;&#x72;&#x40;&#x34;&#46;&#49;&#x2e;&#48;</a> <a href="mailto:&#108;&#101;&#115;&#115;&#x40;&#x33;&#x2e;&#57;&#46;&#x30;">&#108;&#101;&#115;&#115;&#x40;&#x33;&#x2e;&#57;&#46;&#x30;</a></p><p>   url-loader<br>   npm install –save-dev <a href="mailto:&#117;&#x72;&#108;&#45;&#108;&#x6f;&#97;&#x64;&#x65;&#114;&#64;&#x31;&#x2e;&#49;&#46;&#50;">&#117;&#x72;&#108;&#45;&#108;&#x6f;&#97;&#x64;&#x65;&#114;&#64;&#x31;&#x2e;&#49;&#46;&#50;</a></p><p>   es6转换成es5<br>   npm install –save-dev <a href="mailto:&#98;&#97;&#98;&#x65;&#x6c;&#45;&#x6c;&#x6f;&#97;&#100;&#x65;&#114;&#x40;&#55;&#46;&#x31;&#x2e;&#53;">&#98;&#97;&#98;&#x65;&#x6c;&#45;&#x6c;&#x6f;&#97;&#100;&#x65;&#114;&#x40;&#55;&#46;&#x31;&#x2e;&#53;</a> <a href="mailto:&#98;&#x61;&#98;&#x65;&#108;&#45;&#x63;&#111;&#x72;&#101;&#x40;&#x36;&#46;&#50;&#x36;&#x2e;&#x33;">&#98;&#x61;&#98;&#x65;&#108;&#45;&#x63;&#111;&#x72;&#101;&#x40;&#x36;&#46;&#50;&#x36;&#x2e;&#x33;</a> <a href="mailto:&#98;&#x61;&#x62;&#101;&#x6c;&#45;&#x70;&#x72;&#x65;&#115;&#101;&#116;&#x2d;&#x65;&#115;&#x32;&#48;&#49;&#x35;&#x40;&#x36;&#x2e;&#x32;&#52;&#x2e;&#x31;">&#98;&#x61;&#x62;&#101;&#x6c;&#45;&#x70;&#x72;&#x65;&#115;&#101;&#116;&#x2d;&#x65;&#115;&#x32;&#48;&#49;&#x35;&#x40;&#x36;&#x2e;&#x32;&#52;&#x2e;&#x31;</a></p><p>   下面是对扩展的依赖进行的配置<br>   <div class="code-wrapper"><pre><code class="hljs js">   <span class="hljs-comment">//webpack.config.js文件</span>   <span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-built_in">module</span>.exports=&#123;    <span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;./src/main.js&#x27;</span>,    <span class="hljs-attr">output</span>:&#123;        <span class="hljs-attr">path</span>:path.resolve(__dirname,<span class="hljs-string">&#x27;dist&#x27;</span>), <span class="hljs-comment">//__dirname是绝对路径，在node.js中的</span>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;bundle.js&#x27;</span>,        <span class="hljs-attr">publicPath</span>:<span class="hljs-string">&#x27;dist/&#x27;</span>  <span class="hljs-comment">//在url图片的时候让他在dist这个文件中找</span>    &#125;,    <span class="hljs-attr">module</span>:&#123;        <span class="hljs-attr">rules</span>:[            &#123;            <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.css$/</span>,            use:[<span class="hljs-string">&#x27;style-loader&#x27;</span>,<span class="hljs-string">&#x27;css-loader&#x27;</span>]        &#125;,            &#123;            <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.less$/</span>,        <span class="hljs-comment">// use: [&#x27;style-loader&#x27;,&#x27;css-loader&#x27;,&quot;less-loader&quot;]</span>         use:[&#123;             <span class="hljs-attr">loader</span>:<span class="hljs-string">&quot;style-loader&quot;</span>         &#125;,&#123;             <span class="hljs-attr">loader</span>:<span class="hljs-string">&quot;css-loader&quot;</span>         &#125;,&#123;             <span class="hljs-attr">loader</span>:<span class="hljs-string">&quot;less-loader&quot;</span>,                   &#125;]        &#125;,&#123;            <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.(png|jpg|gif|jpeg)$/</span>,            use:[&#123;                <span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;url-loader&#x27;</span>,                <span class="hljs-attr">options</span>:&#123;                    <span class="hljs-attr">limit</span>:<span class="hljs-number">8196</span>,  <span class="hljs-comment">//8kb的图片，</span>                    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;img/[name].[hash:8].[ext]&#x27;</span> <span class="hljs-comment">//在img文件夹中[name]本身的命名+[hash.8]八位的嘻哈值,[ext]扩展名</span>                &#125;                             &#125;]        &#125;,&#123;            <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.js$/</span>,            exclude: <span class="hljs-regexp">/(node_modules|bower_components)/</span>,<span class="hljs-comment">//排除node_modules文件夹不打包里面代码</span>            use:&#123;                <span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;babel-loader&#x27;</span>,                <span class="hljs-attr">options</span>:&#123;                    <span class="hljs-attr">presets</span>:[<span class="hljs-string">&#x27;es2015&#x27;</span>]                &#125;            &#125;        &#125;    ]    &#125;&#125;</code></pre></div></p><h2 id="webpakc的Vue的配置"><a href="#webpakc的Vue的配置" class="headerlink" title="webpakc的Vue的配置"></a>webpakc的Vue的配置</h2><p>   1.先npm install Vue –save<br>   2.在main.js中导入 import vue from ‘vue’<br>   3.要设置config.js文件resolve:{alias:{ ‘vue$’:’vue/dist/vue.esm.js’}}</p><h4 id="vue的分离到src的vue文件夹中"><a href="#vue的分离到src的vue文件夹中" class="headerlink" title="vue的分离到src的vue文件夹中"></a>vue的分离到src的vue文件夹中</h4><h2 id="webpakc的plugin-插件"><a href="#webpakc的plugin-插件" class="headerlink" title="webpakc的plugin(插件)"></a>webpakc的plugin(插件)</h2><h4 id="打包html的plugin"><a href="#打包html的plugin" class="headerlink" title="打包html的plugin"></a>打包html的plugin</h4><p>我们知道，在真实发布项目时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义了。<br>所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin插件<br>安装HtmlWebpackPlugin插件<br>   <font style="color:red">npm install <a href="mailto:&#104;&#x74;&#x6d;&#108;&#x2d;&#119;&#101;&#x62;&#112;&#97;&#99;&#x6b;&#45;&#112;&#108;&#117;&#103;&#x69;&#x6e;&#x40;&#50;&#46;&#51;&#x30;&#x2e;&#x31;">&#104;&#x74;&#x6d;&#108;&#x2d;&#119;&#101;&#x62;&#112;&#97;&#99;&#x6b;&#45;&#112;&#108;&#117;&#103;&#x69;&#x6e;&#x40;&#50;&#46;&#51;&#x30;&#x2e;&#x31;</a> –save-dev</font></p>   <div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<span class="hljs-built_in">module</span>.exports=&#123;... <span class="hljs-attr">plugins</span>:[         <span class="hljs-keyword">new</span> webpack.BannerPlugin(<span class="hljs-string">&#x27;最终版权归我falsh所有&#x27;</span>),         <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;             <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;index.html&#x27;</span>         &#125;)     ]</code></pre></div><h4 id="js压缩的Plugin"><a href="#js压缩的Plugin" class="headerlink" title="js压缩的Plugin"></a>js压缩的Plugin</h4><p>在项目发布之前，我们必然需要对js等文件进行压缩处理<br>这里，我们就对打包的js文件进行压缩<br>我们使用一个第三方的插件uglifyjs-webpack-plugin，并且版本号指定1.1.1，和CLI2保持一致<br> <font style="color:red">npm install <a href="mailto:&#117;&#103;&#x6c;&#105;&#102;&#x79;&#x6a;&#x73;&#x2d;&#x77;&#x65;&#98;&#x70;&#97;&#x63;&#107;&#x2d;&#112;&#108;&#x75;&#x67;&#105;&#110;&#x40;&#49;&#x2e;&#49;&#46;&#49;">&#117;&#103;&#x6c;&#105;&#102;&#x79;&#x6a;&#x73;&#x2d;&#x77;&#x65;&#98;&#x70;&#97;&#x63;&#107;&#x2d;&#112;&#108;&#x75;&#x67;&#105;&#110;&#x40;&#49;&#x2e;&#49;&#46;&#49;</a> –save-dev</font></p> <div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ugilfy =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)  <span class="hljs-built_in">module</span>.exports=&#123;  ...   <span class="hljs-attr">plugins</span>:[            <span class="hljs-keyword">new</span> ugilfy()       ]</code></pre></div><h4 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h4><p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果</p><p>   安装<br><font style="color:red">npm install –save-dev <a href="mailto:&#x77;&#101;&#98;&#112;&#97;&#x63;&#x6b;&#45;&#x64;&#x65;&#x76;&#x2d;&#x73;&#101;&#114;&#x76;&#101;&#x72;&#x40;&#50;&#46;&#x39;&#x2e;&#x31;">&#x77;&#101;&#98;&#112;&#97;&#x63;&#x6b;&#45;&#x64;&#x65;&#x76;&#x2d;&#x73;&#101;&#114;&#x76;&#101;&#x72;&#x40;&#50;&#46;&#x39;&#x2e;&#x31;</a></font></p><p>webpack.config.js 文件的配置</p> <div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports=&#123;... <span class="hljs-attr">devServer</span>:&#123;         <span class="hljs-attr">contentBase</span>:<span class="hljs-string">&#x27;./dist&#x27;</span>,         <span class="hljs-attr">inline</span>:<span class="hljs-literal">true</span>     &#125;</code></pre></div><p>   package.json文件</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&quot;bulid&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span><span class="hljs-string">&#x27;dev&#x27;</span> : <span class="hljs-string">&quot;webpack-dev-server --open&quot;</span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2020/08/14/Vue%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/08/14/Vue%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><div class="code-wrapper"><pre><code>1. v-bind绑定属性值 简写&quot;:&quot; 例如: :class=&quot;data&quot; :for=&quot;data&quot;2. v-model双向绑定值 例如： &lt;input type=&quot;text&quot; v-mode=&quot;data&quot;&gt; 只要input发生改变data中数据也会改变    修饰符：v-model.lazy 例如&lt;input type=&quot;text&quot;  v-mode=&quot;data&quot;&gt;当input失去光标才调用v-model            v-model.number 例如&lt;input type=&quot;number&quot;  v-mode=&quot;data&quot;&gt;v-model双向绑定都是string类型 加上number变得数字类型            v-model.trim 例如&lt;input type=&quot;text&quot;  v-mode=&quot;data&quot;&gt; input输入空格会使data数据也有空格。所以加上修饰符会去掉所有空格</code></pre></div><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><div class="code-wrapper"><pre><code><pre><code class="hljs php"><span class="hljs-comment">//创建组件</span><span class="hljs-keyword">const</span> cpnC = Vue.extend(&#123;    template:`&lt;div&gt;我是组件&lt;/div&gt; `&#125;)<span class="hljs-comment">//全局注册组件</span>Vue.components(<span class="hljs-string">&#x27;cpn&#x27;</span>,cpnC)<span class="hljs-comment">//局部注册组件</span>    <span class="hljs-keyword">const</span> app= <span class="hljs-keyword">new</span> Vue(&#123;        el:<span class="hljs-comment">#app,</span>        components:&#123; <span class="hljs-comment">//注册组件</span>        cpn:cpnC,        &#125;    &#125;)      <span class="hljs-comment">//语法糖省去Vue.extend()，可以直接用对象来代替</span>    <span class="hljs-keyword">const</span> app= <span class="hljs-keyword">new</span> Vue(&#123;                    el:<span class="hljs-comment">#app,</span>                    components:&#123; <span class="hljs-comment">//注册组件</span>                    cpn:&#123;                        template：`&lt;div&gt;我是组件&lt;/div&gt;`                    &#125;,                    &#125;                &#125;)  <span class="hljs-comment">//在html中使用组件</span>&lt;cpn&gt;&lt;/cpn&gt;</code></pre></div></code></pre><h3 id="1-如何将组件模版抽离出来"><a href="#1-如何将组件模版抽离出来" class="headerlink" title="1.如何将组件模版抽离出来"></a>1.如何将组件模版抽离出来</h3><div class="code-wrapper"><pre><code><pre><code class="hljs js"><span class="hljs-comment">// 方法一</span>&lt;script type=<span class="hljs-string">&quot;text/x-template&quot;</span> id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是组件模版<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> &lt;/script&gt;<span class="hljs-comment">// 方法二</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是组件模版<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="hljs-comment">// vue事例使用模版</span>template:<span class="hljs-string">&#x27;#cpn&#x27;</span></code></pre></div></code></pre><h3 id="2-组件数据的存放"><a href="#2-组件数据的存放" class="headerlink" title="2.组件数据的存放"></a>2.组件数据的存放</h3><div class="code-wrapper"><pre><code>组件对象也有打他属性(也可以有methods(生命周期函数)等属性)data必须是一个函数(不然会报错)而且返回是一个对象，对象内部保存着数据<pre><code class="hljs php"><span class="hljs-comment">//注册一个全局组件 </span> Vue.components(<span class="hljs-string">&#x27;cpn&#x27;</span>,&#123;     template:<span class="hljs-string">&#x27;#cpn&#x27;</span>,     data()&#123;         <span class="hljs-keyword">return</span>&#123;             message:<span class="hljs-string">&#x27;你好啊&#x27;</span>,             title:<span class="hljs-string">&#x27;我是标题&#x27;</span>         &#125;     &#125; &#125;)</code></pre></div></code></pre><h3 id="3-父子组件通信-父传子props"><a href="#3-父子组件通信-父传子props" class="headerlink" title="3.父子组件通信-父传子props"></a>3.父子组件通信-父传子props</h3><div class="code-wrapper"><pre><code><pre><code class="hljs php"><span class="hljs-comment">// html中</span>    &lt;cpn v-bind:message2=<span class="hljs-string">&quot;message&quot;</span> &gt;&lt;/cpn&gt;<span class="hljs-comment">//子组件中</span>    <span class="hljs-comment">//props :[&#x27;message&#x27;]或者props:&#123;message:Array&#125;</span>    props:&#123;        message2:&#123;            type:<span class="hljs-keyword">Object</span>,            <span class="hljs-keyword">default</span>:<span class="hljs-string">&#x27;aaaaa&#x27;</span>        &#125;    &#125;</code></pre></div></code></pre><h4 id="父访问子组件-children-refs"><a href="#父访问子组件-children-refs" class="headerlink" title="父访问子组件 children/refs"></a>父访问子组件 children/refs</h4><div class="code-wrapper"><pre><code><pre><code class="hljs php"><span class="hljs-comment">//children的使用方法</span>methods:&#123;    btnclick()&#123;        console.log(this.children[i].name) <span class="hljs-comment">//i是第i个子组件的data数据name</span>    &#125;&#125;<span class="hljs-comment">//refs的使用方法</span>    <span class="hljs-comment">// html中 </span>    &lt;cpn ref=<span class="hljs-string">&#x27;aaa&#x27;</span>&gt;&lt;/cpn&gt;methods:&#123;    btnclick()&#123;        console.log(this.<span class="hljs-variable">$refs</span>.aaa.name);    &#125;&#125;</code></pre></div></code></pre><h3 id="4-子传父数据"><a href="#4-子传父数据" class="headerlink" title="4.子传父数据"></a>4.子传父数据</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// 1.子组件通过自定义事件传送</span>    methods:&#123;     aa(data)&#123;    this.<span class="hljs-variable">$emit</span>(<span class="hljs-string">&#x27;ttt&#x27;</span>,data) <span class="hljs-comment">//ttt是自定义的事件名字,data是要发送过去的数据</span>    &#125;&#125;<span class="hljs-comment">//2.通过html组件@自定义的函数发送到父组件的函数</span>&lt;cpn @ttt=<span class="hljs-string">&quot;aaa(data)&quot;</span> &gt;&lt;cpn&gt; <span class="hljs-comment">//aaa是父组件的方法函数</span><span class="hljs-comment">//3.父组件通过函数接收数据</span>methods:&#123;    aaa(data)&#123;        console.log(data);    &#125;&#125;</code></pre></div><h4 id="子访问Vue实例root"><a href="#子访问Vue实例root" class="headerlink" title="子访问Vue实例root"></a>子访问Vue实例root</h4><div class="code-wrapper"><pre><code>console.log(this.$root.message)</code></pre></div><h2 id="插槽Slot"><a href="#插槽Slot" class="headerlink" title="插槽Slot"></a>插槽Slot</h2><div class="code-wrapper"><pre><code><pre><code class="hljs php">&lt;cpn&gt;&lt;div&gt;我是插槽里的内容&lt;/div&gt;&lt;/cpn&gt; &lt;cpn&gt;&lt;/cpn&gt;&lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;    &lt;h1&gt;我是子组件&lt;/h1&gt;    &lt;slot&gt;&lt;/slot&gt; <span class="hljs-comment">//&lt;slot&gt;我是插槽的默认内容&lt;/slot&gt;</span>&lt;/template&gt;</code></pre></div></code></pre><h3 id="1-具名插槽"><a href="#1-具名插槽" class="headerlink" title="1.具名插槽"></a>1.具名插槽</h3><div class="code-wrapper"><pre><code><pre><code class="hljs php">&lt;cpn&gt;&lt;button slot=<span class="hljs-string">&quot;center&quot;</span>&gt;返回键&lt;/button&gt;&lt;/cpn&gt; &lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;    &lt;slot name=<span class="hljs-string">&quot;left&quot;</span>&gt;&lt;span&gt;左边&lt;/span&gt;&lt;/slot&gt;    &lt;slot name=<span class="hljs-string">&quot;center&quot;</span>&gt;&lt;span&gt;中间&lt;/span&gt;&lt;/slot&gt;    &lt;slot name=<span class="hljs-string">&quot;right&quot;</span>&gt;&lt;span&gt;右边&lt;/span&gt;&lt;/slot&gt;&lt;/template&gt;</code></pre></div>具名插槽就是给组件对应插槽命名 插槽内容替换对应插槽位置。</code></pre><h3 id="2-作用域插槽-父组件对子组件展示的数据不满意进行重新换标签"><a href="#2-作用域插槽-父组件对子组件展示的数据不满意进行重新换标签" class="headerlink" title="2.作用域插槽(父组件对子组件展示的数据不满意进行重新换标签)"></a>2.作用域插槽(父组件对子组件展示的数据不满意进行重新换标签)</h3><div class="code-wrapper"><pre><code>&lt;font&gt;父组件替换插槽内容，但是内容由子组件提供&lt;/font&gt;</code></pre></div><div class="code-wrapper"><pre><code class="hljs php">&lt;cpn&gt;    &lt;template slot-scope=<span class="hljs-string">&quot;slot&quot;</span>&gt; <span class="hljs-comment">//1、</span>        &lt;span <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in slot.data&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;<span class="hljs-comment">//2、</span>    &lt;/template&gt;&lt;/cpn&gt;&lt;template&gt;    &lt;div&gt;        &lt;slot :data=<span class="hljs-string">&quot;data1&quot;</span> &gt;<span class="hljs-comment">//3.:data可以自定义的</span>            &lt;ul&gt;&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in data &quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;        &lt;/slot&gt;    &lt;/div&gt;&lt;/template&gt;</code></pre></div><h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><h3 id="1-模块化最基础封装"><a href="#1-模块化最基础封装" class="headerlink" title="1.模块化最基础封装"></a>1.模块化最基础封装</h3><div class="code-wrapper"><pre><code><pre><code class="hljs php"><span class="hljs-comment">// A.js</span><span class="hljs-keyword">var</span> moduleA=(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-comment">// 定义一个对象</span>    <span class="hljs-keyword">var</span> obj=&#123;&#125;    <span class="hljs-number">2</span>.在对象内部添加变量喝方法    obj.flag = <span class="hljs-string">&quot;true&quot;</span>;    obj.myFunc = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">info</span>)</span>&#123;        console.log(info)    &#125;    <span class="hljs-comment">// 3.将对象返回</span>    <span class="hljs-keyword">return</span> obj&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// B.js</span>    &lt;script src=<span class="hljs-string">&quot;A.js&quot;</span>&gt;&lt;/script&gt;    console.log(modeleA.flag);    moduleA.myFunc(<span class="hljs-string">&quot;我真帅&quot;</span>)</code></pre></div>幸运的是前端模块化开发已经有很多既有的规范了常见的模块化规范:CommonJS/AMD/CMD也有ES6的Modules模块化核心就是导入和导出</code></pre><h4 id="2-ES模块化导入导出"><a href="#2-ES模块化导入导出" class="headerlink" title="2.ES模块化导入导出"></a>2.ES模块化导入导出</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// 在引用的script 类型要是module</span>&lt;script src=<span class="hljs-string">&quot;./a.js&quot;</span> type=<span class="hljs-string">&quot;module&quot;</span>&gt;&lt;/script&gt;&lt;script src=<span class="hljs-string">&quot;./B.js&quot;</span> type=<span class="hljs-string">&quot;module&quot;</span>&gt;&lt;/script&gt;<span class="hljs-comment">// a.js</span>    <span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;你好&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1,mun2</span>)</span>&#123;        <span class="hljs-keyword">return</span> num1+num2;    &#125;    export&#123;        name,sum    &#125;    <span class="hljs-comment">//方法2</span>    export <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum2</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;        <span class="hljs-keyword">return</span> num1+num2    &#125;        <span class="hljs-comment">//在某些情况我们并不希望给这个功能命名 让导入者自己命名对应的名字,但只能导出一个</span>        export defalut <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;        <span class="hljs-comment">//导入的文件js</span>        import aaaa <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span><span class="hljs-comment">// B.js</span>import&#123;name,sum&#125;form <span class="hljs-string">&quot;./a.js&quot;</span>;console.log(name)console.loh(sum(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>));    <span class="hljs-comment">//全部导入的方法</span>    import * <span class="hljs-keyword">as</span> aaa form <span class="hljs-string">&quot;./a.js&quot;</span>     console.log(aaa.name)</code></pre></div><h2 id="Webpack的使用"><a href="#Webpack的使用" class="headerlink" title="Webpack的使用"></a>Webpack的使用</h2><p>   什么是Webpack: JS的静态模块化打包工具。<br>    安装Wepack首先需要安装node.js，node.js自带了软件包管理工具npm。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
